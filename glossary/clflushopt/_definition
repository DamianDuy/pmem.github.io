The Intel instruction set has long contained a cache flush
instruction, CLFLUSH, which will evict a specific cache line
from the CPU caches.  The definition of CLFLUSH, which pre-dates
[persistent memory](#persistent-memory), includes a [fence](#fence)
as part of the instruction.  This means that a loop of CLFLUSH
instructions, intended to flush a range
of cache lines, will be serialized due to the fence between each
flush.
<img src="clwb/flush_isa.jpg" alt="Flush ISA" style="float: right">
With the advent of persistent memory, Intel introduced
the **CLFLUSHOPT** instruction, which is optimized by removing
the embedded fence operation.  As a result, a loop of CLFLUSHOPT
instructions will launch the flushes, allowing for some parallelism
of the flushes.  Such a loop should be terminated with a final
[fence](#fence) to ensure completion before software continues under
the assumption that the stores in that range are persistent.

The CLFLUSHOPT instruction always evicts the cache line, meaning
the next access to that address will be a CPU cache miss, even if it
happens very soon after the flush.  Compare this with the [CLWB](#clwb)
instruction, which allows the line to remain valid.
