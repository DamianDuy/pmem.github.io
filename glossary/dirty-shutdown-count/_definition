Flush-on-fail mechanisms like [ADR](#adr) and [eADR](#adr) provide
a [programming model](#programming-model) for PMem by transparently
ensuring stores reach persistence even in the face of sudden power loss.
When the flush-on-fail mechanism itself fails, the promise made to
software no longer holds true and some unflushed stores may have been
lost.  This is a rare occurrence, typically the result of a hardware
fault, but obviously it must be reported to software to avoid silent
data corruption.  The **dirty shutdown count** is the way this failure
is reported to software.

When a PMem-aware application starts using a PMem file, it looks up
the current dirty shutdown count and stores it in the header information
for that file.  Each time the file is opened, the current count is checked
against the stored count to see if a dirty shutdown has happened.  If one
has happened, the application should consider the file in an unknown state.
Applications may attempt to repair the file, but the most common action is
to consider the file lost and to restore it from a redundant source such as
a back up copy.

The [PMDK](#pmdk) libraries store and check the dirty shutdown count as
described above and will refuse to open any pools that fail the check.
