The Intel [Software Development Manuals](http://intel.com/sdm) (SDM)
describe a type of store known as _non-temporal stores* or **NT Stores**.
This excerpt from the manuals describes why they exist:

>Data referenced by a program can be temporal (data will be used again) or
>non-temporal (data will be referenced once and not reused in the immediate
>future). For example, program code is generally temporal, whereas, multimedia
>data, such as the display list in a 3-D graphics application, is often
>non-temporal. To make efficient use of the processor’s caches, it is generally
>desirable to cache temporal data and not cache non-temporal data. Overloading
>the processor’s caches with non-temporal data is sometimes referred to as
>“polluting the caches.” The SSE and SSE2 cacheability control instructions
>enable a program to write non-temporal data to memory in a manner that
>minimizes pollution of caches.

For [persistent memory](#persistent-memory), NT stores are additionally
useful as they bypass the CPU cache so that the stores become persistent
without requiring an additional flushing instruction like [CLWB](#clwb).
<img src="clwb/flush_isa.jpg" alt="Flush ISA" style="float: right">
It is important to note that Intel's NT stores are _write combining_ rather
than _write back_ like normal memory stores.  This means that the stores are
not necessarily globally visible to other threads until a [fence](#fence)
instruction like SFENCE is issued.

Libraries like [PMDK](#pmdk) make heavy use of NT stores.
The [libpmem](#libpmem)
library, for example, uses heuristics to determine a it is better to copy
a memory range using write-back-cached instructions or NT stores.
