The [PMem programming model](#programming-model) states that applications
can directly map persistent memory using the standard memory mapped files API
provided by the OS.  This feature, where system calls like
[mmap](#mmap) and [MapViewOfFile](#mapviewoffile) bypass the page cache,
has been named **DAX** in both Linux and Windows.  DAX is short for
_direct access_ and is a key feature added to the operating systems
in support of persistent memory.

![DAX](dax/dax.jpg)

As shown in the above diagram, an application uses standard APIs to
open a file and then memory map it.  The job of the PMem-aware file system
is to provide the DAX mapping, so that no [paging](#paging) occurs
as the application accesses the memory range.

In order to make stores to PMem persistent, the standard API for flushing
may be used: ([msync](#msync) on Linux, or [FlushViewOfFile](#flushviewoffile)
on Windows).  The programming model also allows for user space flushing
to persistence directly using instructions like [CLWB](#clwb), but this is
only allowed on Linux if `mmap` is successfully called with the `MAP_SYNC`
flag.  On Windows, all DAX mappings allow flushing from user space.

The [Linux doc on DAX](https://www.kernel.org/doc/Documentation/filesystems/dax.txt)
contains additional information about DAX on Linux.
