When a storage device experiences an **uncorrectable error**, it typically
results in an error passed back to applications when they use the storage
APIs to access the lost data.  But for [persistent memory](#persistent-memory),
such errors behave more similarly to [DRAM](#dram) than to storage.

When a server application reads a memory location containing an
uncorrectable error, the system must cause an exception to prevent the
application from consuming corrupted data.  On Intel servers, the CPU
is sent a _poison value_ to indicate the lost data, and when poison
is consumed by software, Intel servers generate a _machine check exception_.
This exception allows the kernel to raise an exception to the application,
such as sending a Linux application a _SIGBUS_ signal.  Under some cases,
a machine check is fatal to the system and it crashes as a result (an example
of this is when the kernel itself is the consumer of the poison).

Persistent memory aware applications will experience uncorrectable errors
in PMem much like they do for DRAM.  The difference is that when an
application crashes due to a DRAM uncorrectable error, that location is
gone when the application restarts -- volatile memory always starts out
new and the contents from previous runs is not expected to stay around.

Obviously, PMem is different and the contents are designed to stay around.
Thus, if an application crashes due to an uncorrectable error in PMem,
it may very well try to access the same location again after restarting,
and crash again due to the same uncorrectable.  This leads to more
complex requirements on PMem-aware applications in order to avoid these
crash loops.  To help this situation, the system may provide a list of
known [bad blocks](#bad-blocks), so that an application can avoid accessing
those areas.  The application architect must also be aware of the
[blast radius](#blast-radius) of uncorrectable errors, which may result
in more data loss than a single memory location when they occur.

This [article on Optane RAS](https://software.intel.com/content/www/us/en/develop/articles/pmem-RAS.html)
contains more details on this topic.
