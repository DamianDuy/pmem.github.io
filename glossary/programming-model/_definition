The term **programming model** can refer to multiple aspects of
[persistent memory](#persistent-memory).

At the lowest level, the programming model describes how to interface
with the hardware.  For persistent memory, the interface is similar to
system memory, where accesses happen with load and store CPU instructions.
At this level, [persistence domain](#persistent-domain) is also defined.
For example, on Intel hardware, instructions like [CLWB](#clwb) are used
to make stores persistent and features like [ADR](#adr) and [eADR](#eadr)
define how and when those instructions are used.

Another use of the term _programming model_ is to describe how applications
get access to persistent memory from the OS.  This is where the SNIA
NVM Programming Model applies.

![PMem Programming Model](programming-model/nvmp.jpg)

As shown in the diagram above, the PMem programming model is a
generic, OS- and vendor-neutral model, where persistent memory
is managed by a kernel driver (called _Generic NVDIMM Driver_ in
the diagram).  That driver provides access for managing the PMem's
health and configuration (the left path).  It also provides
access for standard
[block storage](#block-storage) interfaces (the middle path), so
that file systems and applications designed for traditional storage
will work without modification.  The right path is focus of most
persistent memory programming, where a PMem-aware file system
exposes PMem as files.

The definition of a _PMem-aware file system_ is a file system
that bypasses the system page cache when a file is memory mapped.
This means applications can map the PMem file using standard APIs
like [mmap](#mmap) on Linux and [MapViewOfFile](#mapviewoffile)
on Windows, and the result will be a [DAX](#dax) mapped file,
giving the application direct load/store access to the persistent
memory itself.  Unlike memory mapped files on storage, where
the OS performs [paging](#paging) to DRAM as necessary, the application
is able to access persistent memory data structures in-place, right
where they are located in PMem.

The [PMDK](#pmdk) libraries build on top of this programming model to
provide more convenient abstractions for working with persistent memory.
This environment at the application level, where there are tools and libraries
available, is often described using the term _programming model_ as well.
This means we've described three definitions of the term _programming model_
(the interface to the hardware, the way the OS exposes PMem, and the full
programming environment available to the application).  All of these usages
of the term are valid, but the most common use is to refer to the SNIA
model described above.

In addition to the PMem programming model described above, Linux systems
provide an alternative called [device DAX](#device-dax).  The diagram below
summarizes the various ways available to access persistent memory.

![Access Paths](programming-model/access_slide.jpg)
