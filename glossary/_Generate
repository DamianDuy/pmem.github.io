#!/usr/bin/env perl

#
# _Generate -- generate the glossary
#
# Copies _index.template to index.md, replacing:
#	%TOC% with the sorted table of contents
#	%GLOSSARY% with the sorted sections of glossary definitions
#
# Each entry must have a subdirectory with:
#	A "_term" file containing the term on a single line, as it should
#	appear in the markdown, optionally followed by a pipe character and
#	any alternate terms.
#
#	A "+definition" file containing the markdown explaining the term.
#
# The subdirectory name must match the text of the term in the _term file,
# but converted to lowercase and spaces changed to dashes.  This is because
# that's how markdown will create the anchor name.
#

use strict;

# file names expected by this script
my $template_file = '_index.template';	# input to this script
my $glossary_file = 'index.md';		# generated by this script
my $term_file = '_term';			# in each subdir
my $definition_file = '_definition';		# in each subdir

die "$template_file: $!\n" unless open(TEMPLATE, $template_file);

die ".: $!\n" unless opendir(DIR, '.');
my @anchors = grep { -f "$_/$term_file" && -f "$_/$definition_file" } readdir(DIR);
closedir(DIR);

my %term;
my %also;
my %definition;

foreach my $anchor (@anchors) {
	($term{$anchor}, $also{$anchor}) =
		split(/ *\| */, snarf("$anchor/$term_file"));
	chomp $term{$anchor};
	$term{$anchor} =~ s/\b_/\\_/g;
	chomp $also{$anchor};
	$also{$anchor} =~ s/\b_/\\_/g;
	$definition{$anchor} = snarf("$anchor/$definition_file");
}

print "found " . scalar(@anchors ) . " entries\n";

die "$glossary_file: $!\n" unless open(GLOSSARY, ">$glossary_file");

while (<TEMPLATE>) {
	if (/^%TOC%$/) {
		generate_toc();
	} elsif (/^%GLOSSARY%$/) {
		generate_glossary();
	} else {
		print GLOSSARY;
	}
}

print "generated $glossary_file\n";
close(GLOSSARY);
close(TEMPLATE);
exit(0);

#
# snarf -- slurp an entire file into memory
#
sub snarf {
	my ($file) = @_;
	my $fh;
	my $contents;
	open($fh, '<', $file) or die "$file $!\n";

	local $/;
	$contents = <$fh>;
	close $fh;

	return $contents;
}

#
# generate_toc -- spew the table of contents
#
sub generate_toc {
	print GLOSSARY "<!-- begin toc -->\n\n";

	foreach (sort @anchors) {
		print GLOSSARY "- [$term{$_}](#$_)";
		if ($also{$_}) {
			print GLOSSARY " ($also{$_})";
		}
		print GLOSSARY "\n";
	}

	print GLOSSARY "\n<!-- end toc -->\n";
}

#
# generate_glossary -- spew the glossary
#
sub generate_glossary {
	print GLOSSARY "<!-- begin glossary -->\n\n";

	foreach (sort @anchors) {
		print GLOSSARY "#### $term{$_}\n";
		if ($also{$_}) {
			print GLOSSARY "\n($also{$_})\n\n";
		}
		print GLOSSARY "$definition{$_}\n";
		print GLOSSARY "[Back to top](#contents)\n";
		print GLOSSARY "<br><br><br>\n";
	}

	print GLOSSARY "\n<!-- end glossary -->\n";
}
