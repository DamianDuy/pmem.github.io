The **Persistent Memory Development Kit**, or **PMDK**
is a growing collection of libraries and tools with the stated
goal of making persistent memory programming easier.
Tuned and validated on both
Linux and Windows, the libraries build on the [DAX](#dax)
feature of those operating
systems (short for _Direct Access_) which allows applications to access
persistent memory as memory-mapped files, as described in the
[SNIA NVM Programming Model](#programming-model).

The source for PMDK is spread across multiple
[GitHub repositories](https://pmem.io/repoindex).
<img src="pmdk/pmdk.jpg" alt="PMDK" style="float: right" width="50%">
The PMDK libraries fit into the PMem programming model
as shown in the diagram, where applications pull in just
what they need from PMDK, but otherwise continue to
use the direct access provided by the model.

Since the normal file APIs work with PMem, the application
could use them, or use any library build on storage APIs.
However, those APIs are all _buffer based_, requiring data
copies into and out of DRAM buffers supplied by the
application.  PMDK libraries are designed to provide
features like allocation and transactions, while still
allow the application direct load/store access to its
data structures.

![PMDK Libraries](pmdk/pmdklibs.jpg)

The diagram above shows a quick overview of most of the PMDK
libraries.  The volatile libraries use PMem for its capacity,
but provide no persistence -- the [memkind](#libmemkind) library
is the most common for volatile use cases.

Low level libraries, like [libpmem2](#libpmem2) provide basic
data movement and cache flushing.  The higher level libraries
are built on top of them.

The most flexible and commonly-used library is [libpmemobj](#libpmemobj).

The [pmemkv](#libpmemkv) libraries provide the highest-level, easiest
to use interfaces in the form of a PMem-aware key-value store.

The [PMDK web page](https://pmem.io/pmdk) contains detailed information
on the libraries and how to use them.
