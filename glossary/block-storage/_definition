When comparing traditional storage to persistent memory, these are the primary
differences:

- The interface to block storage is block-based.  Software can only read a
block or write a block.  File systems are typically used to abstract away
this detail by [paging](#paging) blocks to/from storage as required.

- The interface to PMem is byte-addressable.  Software can read or write
any data size without the need for paging.  Persistent data are accessed
in-place, reducing the need for DRAM to hold buffered data.

- When a use case does want to move a block, such as 4k of data, block
storage devices like NVMe SSDs initiate DMA to memory.  This allows the
CPU to perform other work while waiting for the data transfer.

- PMem is typically implemented as an [NVDIMM](#nvdimm),
connected to the memory bus,
which cannot initiate DMA.  To move 4k of data, the CPU usually moves
the data, which is lower latency than a storage device but results in
higher CPU utilization.  One potential solution to this is to use a
DMA engine if the platform provides one.

- PMem can emulate a block storage device and in fact, that is part of the
[PMem programming model](#programming-model).  Block storage cannot emulate
PMem since it is fundamentally not byte-addressable.  Paging can get close
to emulating PMem, especially for fast SSDs, but flushing changes to
persistence will still require executing kernel code with block storage,
where PMem can flush to persistence directly from user space (see [ADR](#adr)
and [eADR](#eadr) for details).

Also see [BTT](#btt) for details on how PMem emulates block storage.
